using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace DiCor.CodeGenerator
{
    public class Program
    {
        private static readonly XNamespace s_docbook = XNamespace.Get("http://docbook.org/ns/docbook");
        private static Dictionary<int, string>? s_cids;

        public static async Task<int> Main(string[] args)
        {
            string path = args.Length == 0 ? "..\\..\\..\\..\\DiCor\\Uid.Generated.cs" : args[0];
            path = Path.GetFullPath(path);

            XElement part16 = await GetAsync(new Uri("http://medical.nema.org/medical/dicom/current/source/docbook/part16/part16.xml")).ConfigureAwait(false);
            IEnumerable<(XElement Section, XAttribute Id)>? part16_sections = part16
                .Descendants(s_docbook + "section")?
                .Select(section => (Section: section, Id: section.Attribute(XNamespace.Xml + "id")))
                .Where(pair => pair.Id?.Value.StartsWith("sect_CID_") ?? false);

            if (part16_sections is null)
            {
                Console.WriteLine("Error reading XML.");
                return 1;
            }

            s_cids = part16_sections
                .ToDictionary(
                    pair => int.Parse(pair.Id.Value.Substring(9)),
                    pair => pair.Section.Element(s_docbook + "title").Value);

            XElement part6 = await GetAsync(new Uri("http://medical.nema.org/medical/dicom/current/source/docbook/part06/part06.xml")).ConfigureAwait(false);
            IEnumerable<Uid>? part6_tableA1 = part6
                .Descendants(s_docbook + "table")?
                .Where(table => table.Attribute(XNamespace.Xml + "id")?.Value == "table_A-1")
                .FirstOrDefault()?
                .Element(s_docbook + "tbody")?
                .Elements(s_docbook + "tr")
                .Select(tr => tr.Elements(s_docbook + "td"))
                .Select(row => A1ToUid(row));

            IEnumerable<Uid>? part6_tableA3 = part6
                .Descendants(s_docbook + "table")?
                .Where(table => table.Attribute(XNamespace.Xml + "id")?.Value == "table_A-3")
                .FirstOrDefault()?
                .Element(s_docbook + "tbody")?
                .Elements(s_docbook + "tr")
                .Select(tr => tr.Elements(s_docbook + "td"))
                .Select(row => A3ToUid(row));

            if (part6_tableA1 is null || part6_tableA3 is null)
            {
                Console.WriteLine("Error reading XML.");
                return 1;
            }

            await using (FileStream file = File.Open(path, FileMode.Create, FileAccess.ReadWrite, FileShare.Read))
            await using (StreamWriter writer = new StreamWriter(file, Encoding.UTF8))
            {
                await writer.WriteAsync(
@"// This file is generated by a tool. Don't change

using System.Collections.Generic;

namespace DiCor
{
    public partial struct Uid
    {
        private static readonly HashSet<Uid> s_uids = new HashSet<Uid>()
        {
").ConfigureAwait(false);
                foreach (Uid uid in part6_tableA1.Concat(part6_tableA3))
                {
                    await writer.WriteAsync(
@$"            Uid.{ToSymbol(uid)},
").ConfigureAwait(false);
                }

                await writer.WriteAsync(
@"        };
").ConfigureAwait(false);
                foreach (Uid uid in part6_tableA1.Concat(part6_tableA3))
                {
                    StorageCategory storageCategory = Uid.GetStorageCategory(uid);
                    await writer.WriteAsync(
@$"        public static readonly Uid {ToSymbol(uid)} = new Uid(""{uid.Value}"", ""{uid.Name}"", UidType.{uid.Type}{(storageCategory != StorageCategory.None ? $", storageCategory: StorageCategory.{storageCategory}" : "")}{(uid.IsRetired ? ", isRetired: true" : "")});
").ConfigureAwait(false);
                }
                await writer.WriteAsync(
@"    }
}
").ConfigureAwait(false);
            }

            return 0;
        }

        private static async Task<XElement> GetAsync(Uri uri)
        {
            Console.WriteLine($"Downloading {uri}...");
            using (HttpResponseMessage response = await new HttpClient().GetAsync(uri).ConfigureAwait(false))
            {
                Stream stream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
                return await XElement.LoadAsync(stream, LoadOptions.None, cancellationToken: default).ConfigureAwait(false);
            }
        }

        private static Uid A1ToUid(IEnumerable<XElement> row)
        {
            string uid = row.ElementAt(0).Value.Replace("\u200b", "");
            string name = row.ElementAt(1).Value;

            return new Uid(
                    uid,
                    name,
                    ToUidType(row.ElementAt(2).Value),
                    isRetired: name.Contains("(Retired)", StringComparison.OrdinalIgnoreCase));
        }

        private static UidType ToUidType(string value)
        {
            if (value.Equals("synchronization frame of reference", StringComparison.OrdinalIgnoreCase))
                return UidType.Synchronization;
            if (value.Contains("frame of reference", StringComparison.OrdinalIgnoreCase))
                return UidType.FrameOfReference;
            if (value.Contains("sop instance", StringComparison.OrdinalIgnoreCase))
                return UidType.SOPInstance;
            if (value.Contains("coding scheme", StringComparison.OrdinalIgnoreCase))
                return UidType.CodingScheme;
            if (value.Equals("ldap oid", StringComparison.OrdinalIgnoreCase))
                return UidType.LDAP;

            return Enum.Parse<UidType>(value.Replace(" ", null));
        }

        private static Uid A3ToUid(IEnumerable<XElement> row)
        {
            string uid = row.ElementAt(0).Value.Replace("\u200b", "");
            string? cid = row
                .ElementAt(1)
                .Descendants(s_docbook + "olink")?
                .FirstOrDefault()?
                .Attribute("targetptr")?
                .Value;

            if (cid is null)
                return new Uid(uid, string.Empty, UidType.ContextGroupName);

            cid = cid.Substring(9);
            string name = s_cids![int.Parse(cid)];

            return new Uid(
                uid,
                $"{name} ({cid})",
                UidType.ContextGroupName,
                isRetired: name.Contains("(Retired)", StringComparison.OrdinalIgnoreCase));
        }

        private static string ToSymbol(Uid uid, bool useValue = false)
        {
            // Additional 9 chars for appending "_RETIRED" and prepending "_" if needed
            Span<char> symbol = stackalloc char[(useValue ? uid.Value : uid.Name).Length + 8 + 1];
            (useValue ? uid.Value : uid.Name).AsSpan().CopyTo(symbol);

            ReadOnlySpan<char> read = symbol;
            int writeAt = 0;
            bool upper = true;

            while (read.Length > 0)
            {
                char ch = read[0];
                if (ch == ':')
                {
                    break;
                }

                if (ch == '(' && (read.StartsWith("(Retired)") || read.StartsWith("(Process ")))
                {
                    read = read.Slice(9);
                }
                else
                {
                    if (char.IsLetterOrDigit(ch) || ch == '_')
                    {
                        symbol[writeAt++] = upper ? char.ToUpperInvariant(ch) : ch;
                        upper = false;
                    }
                    else if (ch == ' ' || ch == '-')
                    {
                        upper = true;
                    }
                    else if (ch == '&' || ch == '.')
                    {
                        symbol[writeAt++] = '_';
                        upper = true;
                    }
                    read = read.Slice(1);
                }
            }
            if (writeAt == 0)
            {
                return ToSymbol(uid, true);
            }
            if (char.IsDigit(symbol[0]))
            {
                symbol.Slice(0, writeAt++).CopyTo(symbol.Slice(1));
                symbol[0] = '_';
            }
            if (uid.IsRetired)
            {
                "_RETIRED".AsSpan().CopyTo(symbol.Slice(writeAt));
                writeAt += 8;
            }

            return symbol.Slice(0, writeAt).ToString();
        }
    }
}
