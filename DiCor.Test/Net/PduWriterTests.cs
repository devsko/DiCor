using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO.Pipelines;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DiCor.Buffers;
using DiCor.Net.UpperLayer;
using Xunit;

namespace DiCor.Test.Net
{
    public class PduWriterTests
    {
        private static ReadOnlySpan<byte> s_AAssociateReq => new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x01, 0x00, 0x00, 0x42, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x15, 0x31, 0x2E,
            0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x30, 0x38, 0x2E, 0x33, 0x2E, 0x31, 0x2E,
            0x31, 0x2E, 0x31, 0x20, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x1B, 0x31,
            0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x30, 0x38, 0x2E, 0x35, 0x2E, 0x31,
            0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x40, 0x00, 0x00, 0x11, 0x31, 0x2E,
            0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x30, 0x38, 0x2E, 0x31, 0x2E, 0x32, 0x50,
            0x00, 0x00, 0x49, 0x51, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x52, 0x00, 0x00, 0x24, 0x31,
            0x2E, 0x32, 0x2E, 0x38, 0x32, 0x36, 0x2E, 0x30, 0x2E, 0x31, 0x2E, 0x33, 0x36, 0x38, 0x30, 0x30,
            0x34, 0x33, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x38, 0x36, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x30, 0x2E,
            0x30, 0x2E, 0x30, 0x53, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x0D, 0x44,
            0x69, 0x43, 0x6F, 0x72, 0x20, 0x31, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x30 };

        [Fact]
        public async Task WriteAAssociateReq()
        {
            var pipe = new Pipe();
            Write();
            await pipe.Writer.CompleteAsync();
            ReadResult result = await pipe.Reader.ReadAsync();
            byte[] actual = result.Buffer.ToArray();

            Assert.True(((ReadOnlySpan<byte>)actual).SequenceEqual(s_AAssociateReq));

            void Write()
            {
                new PduWriter(pipe.Writer)
                    .WriteAAssociateRq(new Association(AssociationType.Find));
            }
        }
    }
}
